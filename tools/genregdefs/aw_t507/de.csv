#type; DE; Display Engine (DE)
#base; DE 0x01000000
##base; DE0 0x01000000
##base; DE1 0x01000000

#type; DE_TOP; Display Engine (DE) TOP
#base; DE_TOP 0x01000000
##	//#define SUNXI_DE2_MUX0_BASE			(SUNXI_DE2_BASE + 0x100000)
##	//#define SUNXI_DE2_MUX1_BASE			(SUNXI_DE2_BASE + 0x200000)

#irq; DE 120; DE interrupt

# https://github.com/RMerl/asuswrt-merlin.ng/blob/master/release/src-rt-5.04axhnd.675x/bootloaders/u-boot-2019.07/arch/arm/include/asm/arch-sunxi/display2.h#L16
# struct de_clk

# SUNXI_DE2_BASE

#regdef; GATE_CFG;	 	0x000;	SCLK_GATE DE SCLK Gating Register
#regdef; BUS_CFG;		0x004;	? HCLK_GATE ? DE HCLK Gating Register
#regdef; RST_CFG;		0x008;	AHB_RESET DE AHB Reset register
#regdef; DIV_CFG;		0x00C;	SCLK_DIV DE SCLK Division register
#regdef; SEL_CFG;		0x010;	? DE2TCON ? MUX register


# define SUNXI_DE2_MUX_GLB_REGS			0x00000
# define SUNXI_DE2_MUX_BLD_REGS			0x01000
# define SUNXI_DE2_MUX_CHAN_REGS		0x02000
# define SUNXI_DE2_MUX_CHAN_SZ			0x1000
# define SUNXI_DE2_MUX_VSU_REGS			0x20000
# define SUNXI_DE2_MUX_GSU1_REGS		0x30000
# define SUNXI_DE2_MUX_GSU2_REGS		0x40000
# define SUNXI_DE2_MUX_GSU3_REGS		0x50000
# define SUNXI_DE2_MUX_FCE_REGS			0xa0000
# define SUNXI_DE2_MUX_BWS_REGS			0xa2000
# define SUNXI_DE2_MUX_LTI_REGS			0xa4000
# define SUNXI_DE2_MUX_PEAK_REGS		0xa6000
# define SUNXI_DE2_MUX_ASE_REGS			0xa8000
# define SUNXI_DE2_MUX_FCC_REGS			0xaa000
# define SUNXI_DE2_MUX_DCSC_REGS		0xb0000

#type; DE_GLB; Display Engine (DE) - Global Control
#base; DE_GLB 0x01100000

# de_mux_base + SUNXI_DE2_MUX_GLB_REGS
# struct de_glb

#regdef; GLB_CTL;	 	0x000;	Global control register
#regdef; GLB_STS;		0x004;	Global status register
#regdef; GLB_DBUFFER;	0x008;	Global double buffer control register
#regdef; GLB_SIZE;		0x00C;	Global size register

#type; DE_UI; Display Engine (DE) - UI surface
#base; DE_UI1 0x01103000
##base; DE_UI2 0x01104000
##base; DE_UI3 0x01105000

#aggreg; CFG; 0x000 4;
#regdef;  ATTR; 0x000; 
#regdef;  SIZE; 0x004; 
#regdef;  COORD; 0x008; 
#regdef;  PITCH; 0x00C; 
#regdef;  TOP_LADDR; 0x010; 
#regdef;  BOT_LADDR; 0x014; 
#regdef;  FCOLOR; 0x018; 
#regdef; padding 0; 0x020; Need for address arithmetics
#aggregend;
#regdef;  TOP_HADDR; 0x080; 
#regdef;  BOT_HADDR; 0x084; 
#regdef;  OVL_SIZE; 0x088; 

# SUNXI_DE2_MUX_BLD_REGS = 0
# de_mux_base + SUNXI_DE2_MUX_BLD_REGS
# struct de_bld

#type; DE_BLD; Display Engine (DE) - Blender
#base; DE_BLD 0x01101000

#regdef; FCOLOR_CTL;	0x000; BLD_FILL_COLOR_CTL Offset 0x000 BLD fill color control register
#aggreg; ATTR; 0x004 4; Pipe [0..3]
#regdef; FCOLOR;	0x000; BLD fill color register
#regdef; INSIZE;	0x004; BLD input memory size register
#regdef; OFFSET;	0x008; BLD input memory offset register
#regdef; padding 0; 0x010; Need for address arithmetics
#aggregend;
#regdef; ROUTE;			0x080; 		BLD_CH_RTCTL Offset 0x080 BLD routing control register
#regdef; PREMULTIPLY; 	0x084; Offset 0x080 BLD pre-multiply control register
#regdef; BKCOLOR; 0x088;
#regdef; OUTPUT_SIZE; 0x08C;
#regdef; BLD_MODE; 0x090 4; BLD_CTL
#regdef; CK_CTL; 0x0B0;
#regdef; CK_CFG; 0x0B4;
#regdef; CK_MAX; 0x0C0 4;
#regdef; CK_MIN; 0x0E0 4;
#regdef; OUT_CTL; 0x0FC;

#type; DE_VI; Display Engine (DE) - VI surface
#base; DE_VI 0x01102000

#aggreg; CFG; 0x000 4;
#regdef; ATTR; 0x000;
#regdef; SIZE; 0x004;
#regdef; COORD; 0x008;
#regdef; PITCH; 0x00C 3;
#regdef; TOP_LADDR; 0x018 3;
#regdef; BOT_LADDR; 0x024 3;
#aggregend;
#regdef; FCOLOR; 0x0C0 4;
#regdef; TOP_HADDR; 0x0D0 3;
#regdef; BOT_HADDR; 0x0DC 3;
#regdef; OVL_SIZE; 0x0E8 2;
#regdef; HORI; 0x0F0 2;
#regdef; VERT; 0x0F8 2;
