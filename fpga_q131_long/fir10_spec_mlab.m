%                                                                                                          
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                   
%                                                                                                          
%--------------------------------------------------------------------------------------------------------- 
%This Model Only Support Single Channel Input Data. 
%Please input:                                      
%data vector: 		stimulation(1:n)                
%FILTER PARAMETER  
%Input Data Width: 28
%Decimation Factor: 10
%MSB Truncated Bits:
%MSB Satuated Bits :
%LSB Truncated bits:
%LSB Rounded bits  :
%FIR Width (Full Calculation Width Before Output Width Adjust) :28 
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values
 function  output = fir10_spec_mlab(stimulation, output);
 coef_matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,-31,-36,-39,-38,-33,-25,0,0,0,32,47,60,68,72,70,61,46,26,0,-26,-53,-78,-99,-113,-118,-114,-99,-75,-42,0,39,81,119,151,171,179,172,149,113,65,0,-54,-116,-171,-216,-245,-255,-245,-213,-161,-93,0,73,158,235,296,336,351,336,293,223,130,22,-94,-209,-312,-394,-448,-467,-448,-391,-298,-176,-33,119,269,405,512,583,608,585,511,392,234,50,-146,-340,-513,-652,-743,-777,-747,-654,-503,-304,-71,177,422,642,818,934,977,942,827,639,391,101,-210,-515,-790,-1011,-1156,-1212,-1170,-1030,-800,-494,-136,246,623,963,1236,1417,1489,1440,1271,991,620,184,-283,-744,-1159,-1494,-1718,-1808,-1753,-1551,-1215,-767,-240,325,882,1386,1793,2067,2180,2118,1879,1479,943,313,-364,-1034,-1640,-2131,-2464,-2604,-2536,-2256,-1783,-1148,-398,408,1206,1931,2520,2920,3094,3019,2694,2139,1391,506,-448,-1393,-2253,-2955,-3435,-3648,-3568,-3193,-2545,-1670,-631,490,1604,2619,3450,4022,4281,4198,3768,3017,1998,786,-525,-1830,-3022,-4001,-4679,-4993,-4907,-4417,-3552,-2371,-964,561,2083,3476,4623,5423,5802,5716,5161,4168,2808,1181,-586,-2352,-3973,-5312,-6252,-6705,-6623,-5996,-4862,-3301,-1429,609,2650,4528,6085,7185,7726,7650,6947,5658,3874,1728,-614,-2965,-5134,-6938,-8220,-8863,-8798,-8012,-6552,-4520,-2068,615,3314,5809,7892,9382,10143,10095,9221,7572,5265,2472,-591,-3680,-6544,-8942,-10669,-11566,-11541,-10572,-8717,-6105,-2933,556,4083,7361,10117,12113,13168,13174,12105,10022,7073,3477,-488,-4506,-8251,-11411,-13713,-14951,-14997,-13821,-11489,-8165,-4096,402,4972,9243,12861,15513,16962,17061,15770,13164,9423,4827,-270,-5462,-10329,-14465,-17517,-19211,-19377,-17965,-15055,-10850,-5662,108,6004,11546,16275,19786,21764,22014,20474,17229,12503,6648,116,-6578,-12890,-18297,-22337,-24649,-25004,-23327,-19708,-14397,-7787,-386,7219,14415,20604,25258,27962,28448,26626,22589,16614,9142,746,-7911,-16128,-23227,-28600,-31768,-32421,-30444,-25934,-19199,-10732,-1183,8698,18111,26278,32503,36230,37092,34949,29900,22283,12656,1752,-9571,-20402,-29844,-37092,-41498,-42629,-40309,-34635,-25982,-14978,-2458,10598,23139,34129,42630,47879,49360,46849,40439,30545,17875,3385,-11795,-26447,-39361,-49431,-55754,-57703,-54989,-47694,-36274,-21536,-4579,13280,30614,45990,58093,65829,68425,65500,57111,43759,26365,6211,-15154,-36028,-54690,-69537,-79219,-82756,-79629,-69842,-53940,-32982,-8481,17705,43506,66800,85581,98122,103129,99862,88216,68760,42717,11902,-21402,-54598,-84974,-109903,-127066,-134643,-131488,-117250,-92447,-58472,-17532,27476,73152,115823,151812,177719,190702,188724,170765,136974,88732,28650,-39530,-111118,-180726,-242588,-290915,-320277,-325965,-304344,-253136,-171641,-60855,76502,236067,412022,597368,784285,964549,1129984,1272906,1386565,1465528,1505990,1505990,1465528,1386565,1272906,1129984,964549,784285,597368,412022,236067,76502,-60855,-171641,-253136,-304344,-325965,-320277,-290915,-242588,-180726,-111118,-39530,28650,88732,136974,170765,188724,190702,177719,151812,115823,73152,27476,-17532,-58472,-92447,-117250,-131488,-134643,-127066,-109903,-84974,-54598,-21402,11902,42717,68760,88216,99862,103129,98122,85581,66800,43506,17705,-8481,-32982,-53940,-69842,-79629,-82756,-79219,-69537,-54690,-36028,-15154,6211,26365,43759,57111,65500,68425,65829,58093,45990,30614,13280,-4579,-21536,-36274,-47694,-54989,-57703,-55754,-49431,-39361,-26447,-11795,3385,17875,30545,40439,46849,49360,47879,42630,34129,23139,10598,-2458,-14978,-25982,-34635,-40309,-42629,-41498,-37092,-29844,-20402,-9571,1752,12656,22283,29900,34949,37092,36230,32503,26278,18111,8698,-1183,-10732,-19199,-25934,-30444,-32421,-31768,-28600,-23227,-16128,-7911,746,9142,16614,22589,26626,28448,27962,25258,20604,14415,7219,-386,-7787,-14397,-19708,-23327,-25004,-24649,-22337,-18297,-12890,-6578,116,6648,12503,17229,20474,22014,21764,19786,16275,11546,6004,108,-5662,-10850,-15055,-17965,-19377,-19211,-17517,-14465,-10329,-5462,-270,4827,9423,13164,15770,17061,16962,15513,12861,9243,4972,402,-4096,-8165,-11489,-13821,-14997,-14951,-13713,-11411,-8251,-4506,-488,3477,7073,10022,12105,13174,13168,12113,10117,7361,4083,556,-2933,-6105,-8717,-10572,-11541,-11566,-10669,-8942,-6544,-3680,-591,2472,5265,7572,9221,10095,10143,9382,7892,5809,3314,615,-2068,-4520,-6552,-8012,-8798,-8863,-8220,-6938,-5134,-2965,-614,1728,3874,5658,6947,7650,7726,7185,6085,4528,2650,609,-1429,-3301,-4862,-5996,-6623,-6705,-6252,-5312,-3973,-2352,-586,1181,2808,4168,5161,5716,5802,5423,4623,3476,2083,561,-964,-2371,-3552,-4417,-4907,-4993,-4679,-4001,-3022,-1830,-525,786,1998,3017,3768,4198,4281,4022,3450,2619,1604,490,-631,-1670,-2545,-3193,-3568,-3648,-3435,-2955,-2253,-1393,-448,506,1391,2139,2694,3019,3094,2920,2520,1931,1206,408,-398,-1148,-1783,-2256,-2536,-2604,-2464,-2131,-1640,-1034,-364,313,943,1479,1879,2118,2180,2067,1793,1386,882,325,-240,-767,-1215,-1551,-1753,-1808,-1718,-1494,-1159,-744,-283,184,620,991,1271,1440,1489,1417,1236,963,623,246,-136,-494,-800,-1030,-1170,-1212,-1156,-1011,-790,-515,-210,101,391,639,827,942,977,934,818,642,422,177,-71,-304,-503,-654,-747,-777,-743,-652,-513,-340,-146,50,234,392,511,585,608,583,512,405,269,119,-33,-176,-298,-391,-448,-467,-448,-394,-312,-209,-94,22,130,223,293,336,351,336,296,235,158,73,0,-93,-161,-213,-245,-255,-245,-216,-171,-116,-54,0,65,113,149,172,179,171,151,119,81,39,0,-42,-75,-99,-114,-118,-113,-99,-78,-53,-26,0,26,46,61,70,72,68,60,47,32,0,0,0,-25,-33,-38,-39,-36,-31,-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;         
 DECI_FACTOR  =  10;
 MSB_RM  = 2;
 MSB_TYPE  = 0;
 LSB_RM  = 24;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 28 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 28 ;  %28
  DATA_WIDTH = 28;
 data_type = 1;

 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix); 
 if (CX ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 
   
 %fill coef_matrix to length of data with the latest coef set 
 if (CX < DY * INTER_FACTOR) 
   for i= CX +1:DY * INTER_FACTOR 
     coef_matrix(i,:) = coef_matrix(CX,:); 
   end 
 end
  
        %check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else
     		output = out_dec;%(DECI_FACTOR:DECI_FACTOR:len1);
 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);       
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  
         
