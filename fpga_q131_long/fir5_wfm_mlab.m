%                                                                                                          
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!                                                   
%                                                                                                          
%--------------------------------------------------------------------------------------------------------- 
%This Model Only Support Single Channel Input Data. 
%Please input:                                      
%data vector: 		stimulation(1:n)                
%FILTER PARAMETER  
%Input Data Width: 28
%Decimation Factor: 5
%MSB Truncated Bits:
%MSB Satuated Bits :
%LSB Truncated bits:
%LSB Rounded bits  :
%FIR Width (Full Calculation Width Before Output Width Adjust) :32 
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values
 function  output = fir5_wfm_mlab(stimulation, output);
 coef_matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,-6,-8,-7,0,0,6,10,12,10,6,0,-9,-15,-17,-15,-8,0,12,20,23,20,11,0,-16,-27,-31,-27,-14,0,21,35,40,34,18,0,-27,-44,-50,-43,-23,5,33,54,62,52,28,-6,-40,-66,-75,-64,-34,7,48,79,90,76,41,-8,-57,-94,-107,-91,-48,9,68,111,126,107,57,-11,-79,-129,-147,-124,-67,12,92,150,170,144,78,-14,-106,-173,-196,-166,-89,16,122,199,225,191,103,-18,-139,-227,-257,-218,-117,20,158,258,292,248,133,-22,-178,-292,-330,-280,-151,25,201,329,372,316,170,-27,-225,-369,-418,-355,-192,30,252,414,469,397,215,-33,-281,-462,-523,-444,-240,36,313,514,582,494,268,-39,-347,-571,-647,-549,-298,43,384,632,717,609,331,-46,-424,-698,-792,-673,-366,50,467,770,874,742,405,-54,-513,-847,-961,-817,-446,59,563,931,1056,899,491,-63,-616,-1020,-1158,-985,-539,68,674,1116,1268,1080,592,-72,-735,-1219,-1385,-1180,-647,77,802,1330,1512,1289,708,-81,-872,-1448,-1647,-1404,-773,87,948,1576,1793,1529,843,-92,-1028,-1711,-1948,-1662,-917,98,1115,1856,2115,1806,998,-103,-1205,-2011,-2292,-1958,-1083,109,1304,2177,2482,2122,1176,-114,-1408,-2353,-2685,-2296,-1274,121,1520,2543,2902,2484,1381,-126,-1637,-2743,-3133,-2683,-1493,133,1765,2959,3382,2898,1615,-138,-1898,-3188,-3646,-3126,-1744,145,2043,3435,3930,3372,1885,-150,-2195,-3696,-4232,-3633,-2033,158,2361,3978,4558,3915,2195,-163,-2535,-4278,-4904,-4216,-2367,170,2724,4602,5279,4541,2554,-175,-2924,-4947,-5679,-4889,-2753,182,3141,5322,6113,5267,2971,-187,-3372,-5722,-6578,-5672,-3204,194,3625,6158,7085,6113,3460,-199,-3895,-6628,-7631,-6590,-3735,206,4191,7141,8229,7113,4039,-210,-4511,-7698,-8880,-7682,-4368,217,4864,8313,9597,8311,4735,-220,-5248,-8986,-10384,-9001,-5137,227,5677,9735,11261,9773,5588,-230,-6150,-10566,-12237,-10631,-6090,237,6684,11504,13340,11604,6662,-240,-7284,-12563,-14587,-12706,-7309,246,7974,13779,16022,13977,8060,-248,-8766,-15184,-17684,-15452,-8932,253,9697,16837,19646,17199,9969,-255,-10801,-18807,-21992,-19295,-11217,260,12145,21212,24866,21874,12761,-261,-13811,-24211,-28469,-25123,-14714,265,15950,28081,33146,29368,17286,-265,-18793,-33271,-39471,-35157,-20823,269,22791,40641,48552,43571,26034,-269,-28831,-51961,-62741,-56958,-34487,272,39093,71687,88176,81724,50686,-271,-60464,-114931,-147332,-143449,-94530,274,132968,287554,442562,574817,663698,695013,663698,574817,442562,287554,132968,274,-94530,-143449,-147332,-114931,-60464,-271,50686,81724,88176,71687,39093,272,-34487,-56958,-62741,-51961,-28831,-269,26034,43571,48552,40641,22791,269,-20823,-35157,-39471,-33271,-18793,-265,17286,29368,33146,28081,15950,265,-14714,-25123,-28469,-24211,-13811,-261,12761,21874,24866,21212,12145,260,-11217,-19295,-21992,-18807,-10801,-255,9969,17199,19646,16837,9697,253,-8932,-15452,-17684,-15184,-8766,-248,8060,13977,16022,13779,7974,246,-7309,-12706,-14587,-12563,-7284,-240,6662,11604,13340,11504,6684,237,-6090,-10631,-12237,-10566,-6150,-230,5588,9773,11261,9735,5677,227,-5137,-9001,-10384,-8986,-5248,-220,4735,8311,9597,8313,4864,217,-4368,-7682,-8880,-7698,-4511,-210,4039,7113,8229,7141,4191,206,-3735,-6590,-7631,-6628,-3895,-199,3460,6113,7085,6158,3625,194,-3204,-5672,-6578,-5722,-3372,-187,2971,5267,6113,5322,3141,182,-2753,-4889,-5679,-4947,-2924,-175,2554,4541,5279,4602,2724,170,-2367,-4216,-4904,-4278,-2535,-163,2195,3915,4558,3978,2361,158,-2033,-3633,-4232,-3696,-2195,-150,1885,3372,3930,3435,2043,145,-1744,-3126,-3646,-3188,-1898,-138,1615,2898,3382,2959,1765,133,-1493,-2683,-3133,-2743,-1637,-126,1381,2484,2902,2543,1520,121,-1274,-2296,-2685,-2353,-1408,-114,1176,2122,2482,2177,1304,109,-1083,-1958,-2292,-2011,-1205,-103,998,1806,2115,1856,1115,98,-917,-1662,-1948,-1711,-1028,-92,843,1529,1793,1576,948,87,-773,-1404,-1647,-1448,-872,-81,708,1289,1512,1330,802,77,-647,-1180,-1385,-1219,-735,-72,592,1080,1268,1116,674,68,-539,-985,-1158,-1020,-616,-63,491,899,1056,931,563,59,-446,-817,-961,-847,-513,-54,405,742,874,770,467,50,-366,-673,-792,-698,-424,-46,331,609,717,632,384,43,-298,-549,-647,-571,-347,-39,268,494,582,514,313,36,-240,-444,-523,-462,-281,-33,215,397,469,414,252,30,-192,-355,-418,-369,-225,-27,170,316,372,329,201,25,-151,-280,-330,-292,-178,-22,133,248,292,258,158,20,-117,-218,-257,-227,-139,-18,103,191,225,199,122,16,-89,-166,-196,-173,-106,-14,78,144,170,150,92,12,-67,-124,-147,-129,-79,-11,57,107,126,111,68,9,-48,-91,-107,-94,-57,-8,41,76,90,79,48,7,-34,-64,-75,-66,-40,-6,28,52,62,54,33,5,-23,-43,-50,-44,-27,0,18,34,40,35,21,0,-14,-27,-31,-27,-16,0,11,20,23,20,12,0,-8,-15,-17,-15,-9,0,6,10,12,10,6,0,0,-7,-8,-6,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
 INTER_FACTOR  = 1;         
 DECI_FACTOR  =  5;
 MSB_RM  = 2;
 MSB_TYPE  = 0;
 LSB_RM  = 18;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 32 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 32 ;  %32
  DATA_WIDTH = 28;
 data_type = 1;

 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix); 
 if (CX ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 
   
 %fill coef_matrix to length of data with the latest coef set 
 if (CX < DY * INTER_FACTOR) 
   for i= CX +1:DY * INTER_FACTOR 
     coef_matrix(i,:) = coef_matrix(CX,:); 
   end 
 end
  
        %check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else
     		output = out_dec;%(DECI_FACTOR:DECI_FACTOR:len1);
 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width
	data = round (data_in / 2^LSB_RM);       
	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  
         
